name: Deploy workflow on production environment

# trigger가 되길 바라는 action을 입력함. push / pull_request가 있음
# main 브랜치에 push가 되면 actions가 실행되도록 함
on:
  push:
    branches:
      - main

# 위의 이벤트가 트리거되면 실행할 actions의 목록
jobs:
  deploy:
    name: spring boot build & deploy
    # runner가 실행될 환경을 지정함
    # 여기서의 environment는 배포 그룹이 아니고 github actions의 environments 이름을 말함
    environment: production
    runs-on: ubuntu-latest

    # name은 단계별로 실행되는 액션들의 설명을 담은 것으로, 나중에 github action에서 workflow에 해당 이름으로 표시됨
    # uses 키워드로 Action을 불러올 수 있음
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Create .properties file
        uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties

      # gradle 실행 권한 추가
      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # deploy.sh 실행 권한 추가
      - name: Grant execute permission for deploy
        run: chmod +x ./scripts/deploy.sh

      # aws에 접근하기 위한 권한을 받아옴
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 올릴 파일을 디렉터리에 모아서 보낼 것이므로 디렉터리를 생성함
      - name: Make Directory for deliver
        run: mkdir deploy

      # scripts 내 파일을 디렉터리로 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      # appspec.yml 파일을 디렉터리로 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      # 배포할 jar 파일을 디렉터리로 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # S3에 저장할 파일을 모은 디렉터리를 zip 파일로 압축
      - name: Make zip file
        run: zip -r ./kurly.zip ./deploy
        shell: bash

      # S3에 배포할 파일들 업로드
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp --region ap-northeast-2 ./kurly.zip s3://bucket-jungmin-githubactions/

      # 배포
      # 여러 어플리케이션을 같은 CodeDeploy 어플리케이션으로 관리할 수 있으나 배포 그룹은 달라야 한다
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run:
          aws deploy create-deployment --application-name CodeDeploy --deployment-group-name kurly --file-exists-behavior OVERWRITE --s3-location bucket=bucket-jungmin-githubactions,bundleType=zip,key=kurly.zip --region ap-northeast-2